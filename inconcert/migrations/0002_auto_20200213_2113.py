# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2020-02-13 21:13
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        ('inconcert', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(default=False)),
                ('email', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('phone', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('facebook', models.URLField(blank=True, default=None, null=True)),
                ('messenger', models.URLField(blank=True, default=None, null=True)),
                ('twitter', models.URLField(blank=True, default=None, null=True)),
                ('instagram', models.URLField(blank=True, default=None, null=True)),
                ('spotify', models.URLField(blank=True, default=None, null=True)),
                ('soundcloud', models.URLField(blank=True, default=None, null=True)),
                ('bandcamp', models.URLField(blank=True, default=None, null=True)),
                ('youtube', models.URLField(blank=True, default=None, null=True)),
                ('website', models.URLField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=200)),
                ('picture', models.URLField(blank=True, default=None, null=True)),
                ('description', models.CharField(blank=True, max_length=10000, null=True)),
                ('genres_text', models.CharField(blank=True, help_text='Raw genre text, as extracted.', max_length=200, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='A pair of location coordinates.', null=True, srid=4326)),
                ('location_text', models.CharField(blank=True, help_text='Raw location text, as extracted.', max_length=200, null=True)),
                ('likes', models.IntegerField(blank=True, default=None, help_text='Computed like count.', null=True)),
                ('likes_text', models.CharField(blank=True, help_text='Raw likes text, as extracted.', max_length=200, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=200)),
                ('picture', models.URLField(blank=True, default=None, null=True)),
                ('description', models.CharField(blank=True, max_length=10000, null=True)),
                ('start', models.DateTimeField(blank=True, default=None, null=True)),
                ('end', models.DateTimeField(blank=True, default=None, null=True)),
                ('fans_went', models.IntegerField(blank=True, default=None, help_text='Count of fans who attended.', null=True)),
                ('fans_interested', models.IntegerField(blank=True, default=None, help_text='Count of fans who showed interest.', null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('artists', models.ManyToManyField(blank=True, help_text="The event's performer(s)", related_name='events', to='inconcert.Artist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenreParent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parents', to='inconcert.Genre')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inconcert.Genre')),
            ],
            options={
                'verbose_name_plural': 'Genre Network',
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('archived', models.BooleanField(default=False)),
                ('email', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('phone', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('facebook', models.URLField(blank=True, default=None, null=True)),
                ('messenger', models.URLField(blank=True, default=None, null=True)),
                ('twitter', models.URLField(blank=True, default=None, null=True)),
                ('instagram', models.URLField(blank=True, default=None, null=True)),
                ('spotify', models.URLField(blank=True, default=None, null=True)),
                ('soundcloud', models.URLField(blank=True, default=None, null=True)),
                ('bandcamp', models.URLField(blank=True, default=None, null=True)),
                ('youtube', models.URLField(blank=True, default=None, null=True)),
                ('website', models.URLField(blank=True, default=None, null=True)),
                ('name', models.CharField(max_length=200)),
                ('picture', models.URLField(blank=True, default=None, null=True)),
                ('description', models.CharField(blank=True, max_length=10000, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='A pair of location coordinates.', null=True, srid=4326)),
                ('location_text', models.CharField(blank=True, help_text='Raw location text, as extracted.', max_length=200, null=True)),
                ('likes', models.IntegerField(blank=True, default=None, help_text='Computed like count.', null=True)),
                ('likes_text', models.CharField(blank=True, help_text='Raw likes text, as extracted.', max_length=200, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('genres', models.ManyToManyField(blank=True, help_text="The venue's genre tags", related_name='venues', to='inconcert.Genre')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='genre',
            name='genres',
            field=models.ManyToManyField(help_text='The parent genres, if applicable.', related_name='children', through='inconcert.GenreParent', to='inconcert.Genre'),
        ),
        migrations.AddField(
            model_name='event',
            name='venues',
            field=models.ManyToManyField(blank=True, help_text="The event's venue(s)", related_name='events', to='inconcert.Venue'),
        ),
        migrations.AddField(
            model_name='artist',
            name='genres',
            field=models.ManyToManyField(blank=True, help_text="The venue's genre tags", related_name='artists', to='inconcert.Genre'),
        ),
    ]

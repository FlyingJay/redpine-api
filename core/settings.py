"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import dj_database_url
import raven

class ENVS:
    PRODUCTION = 'production'
    STAGING = 'staging'
    DEVELOPMENT = 'development'


ENV = os.environ.get('ENV', ENVS.DEVELOPMENT)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = os.environ.get('SECRET_KEY', '%x&@dyfy*n+=ry9ukefz!n3rgjgj&s&1^&lq7y6qa2hzb#3-q+')

ALLOWED_HOSTS = [
    '*',
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = False

THIRD_PARTY_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.gis',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'maas',
    'background_task',
    'django_filters',
    'rest_framework_filters',
    'rest_framework_gis',
    'timezone_field',
    'directmessages',
]

INTERNAL_APPS = [  
    'analysis',
    'core',
    'cover_bands',
    'socan',
    'spotify',
    'stripper',
    'square',
    'venue_listings',
    'inconcert',
    'internal.apps.InternalConfig',
]

INSTALLED_APPS = THIRD_PARTY_APPS + INTERNAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'core.context_processors.app_context',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#datcabases

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DATABASES['default'] = dj_database_url.config(conn_max_age=600)
DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework_filters.backends.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100
}

#Venue Listings are displayed in an iFrame, needs to be allowed.
X_FRAME_OPTIONS = 'ALLOW-FROM https://www.showvenues.ca/ https://app-staging.redpinemusic.com/ https://app.redpinemusic.com/ https://inconcert.app/'

INCONCERT_WEBAPP_BASE_URL = os.environ.get('INCONCERT_WEBAPP_BASE_URL')

REDPINE_API_BASE_URL = os.environ.get('REDPINE_API_BASE_URL')
REDPINE_WEBAPP_BASE_URL = os.environ.get('REDPINE_WEBAPP_BASE_URL')
REDPINE_INSTAGRAM_URL = 'https://www.instagram.com/redpineofficial/'
REDPINE_FACEBOOK_URL = 'https://www.facebook.com/redpineofficial/'
REDPINE_TWITTER_URL = 'https://twitter.com/redpineofficial'
REDPINE_DOMAIN_NAME = 'redpinemusic.com'
REDPINE_STATIC_FILES = REDPINE_API_BASE_URL + '/static' # this will need to be changed in the future; for some reason {% static 'file' %} wasn't working in email templates
REDPINE_LOGO_URL = REDPINE_STATIC_FILES + '/mail/logo.png'
REDPINE_WEBAPP_URLS = {
    'LOGIN': lambda: '{}/login'.format(REDPINE_WEBAPP_BASE_URL),
    'ACTS': lambda: '{}/users/me/acts'.format(REDPINE_WEBAPP_BASE_URL),
    'SHOWS': lambda: '{}/users/me/shows'.format(REDPINE_WEBAPP_BASE_URL),
    'VENUES': lambda: '{}/users/me/venues'.format(REDPINE_WEBAPP_BASE_URL),
    'TICKETS': lambda: '{}/users/me/tickets'.format(REDPINE_WEBAPP_BASE_URL),
    'PLAY_SHOW': lambda: '{}/shows/create'.format(REDPINE_WEBAPP_BASE_URL),
    'PLAY_SHOW_VENUE': lambda venue_id: '{}/shows/create?venue={}'.format(REDPINE_WEBAPP_BASE_URL, venue_id),
    'PLEDGES': lambda: '{}/users/me/pledges'.format(REDPINE_WEBAPP_BASE_URL),
    'REVIEWS': lambda: '{}/users/me/reviews'.format(REDPINE_WEBAPP_BASE_URL),
    'MESSAGES': lambda: '{}/users/me/messages'.format(REDPINE_WEBAPP_BASE_URL),
    'MESSAGES_CHAT': lambda user_id: '{}/users/me/messages?chat={}'.format(REDPINE_WEBAPP_BASE_URL, user_id),
    'MESSAGES_COMPOSE': lambda user_id: '{}/users/me/messages?recipient={}'.format(REDPINE_WEBAPP_BASE_URL, user_id),
    'JUST_TICKETS': lambda: '{}/tickets/create'.format(REDPINE_WEBAPP_BASE_URL),
    'SHOW': lambda id: '{}/shows/{}'.format(REDPINE_WEBAPP_BASE_URL, id),
    'SHOW_HUB': lambda id: '{}/shows/{}/hub'.format(REDPINE_WEBAPP_BASE_URL, id),
    'GUEST_LIST': lambda id: '{}/shows/{}/guests'.format(REDPINE_WEBAPP_BASE_URL, id),
    'SHOW_STATS': lambda id: '{}/shows/{}/stats'.format(REDPINE_WEBAPP_BASE_URL, id),
    'ACT': lambda id: '{}/acts/{}'.format(REDPINE_WEBAPP_BASE_URL, id),
    'ACT_CALENDAR': lambda id: '{}/acts/{}/calendar'.format(REDPINE_WEBAPP_BASE_URL, id),
    'VENUE': lambda id: '{}/venues/{}'.format(REDPINE_WEBAPP_BASE_URL, id),
    'VENUE_CALENDAR': lambda id: '{}/venues/{}/calendar'.format(REDPINE_WEBAPP_BASE_URL, id),
    'REGISTER_WITH_ACT': lambda email, act_token: '{}/register/email?email={}&token={}'.format(REDPINE_WEBAPP_BASE_URL, email, act_token),
    'SEARCH_SHOWS': lambda query: '{}/search?category=shows&query={}'.format(REDPINE_WEBAPP_BASE_URL, query),
    'SEARCH_SHOWS_CITY': lambda query, city_id: '{}/search?category=shows&query={}&city={}'.format(REDPINE_WEBAPP_BASE_URL, query, city_id),
    'SEARCH_ACTS': lambda query: '{}/search?category=acts&query={}'.format(REDPINE_WEBAPP_BASE_URL, query),
    'SEARCH_ACTS_CITY': lambda query, city_id: '{}/search?category=acts&query={}&city={}'.format(REDPINE_WEBAPP_BASE_URL, query, city_id),
    'SEARCH_ACTS_GENRE': lambda query, genre_id: '{}/search?category=acts&query={}&genre={}'.format(REDPINE_WEBAPP_BASE_URL, query, genre_id),
    'SEARCH_ACTS_CITY_GENRE': lambda query, city_id, genre_id: '{}/search?category=acts&query={}&city={}&genre={}'.format(REDPINE_WEBAPP_BASE_URL, query, city_id, genre_id),
    'SEARCH_VENUES': lambda query: '{}/search?category=venues&query={}'.format(REDPINE_WEBAPP_BASE_URL, query),
    'SEARCH_VENUES_CITY': lambda query, city_id: '{}/search?category=venues&query={}&city={}'.format(REDPINE_WEBAPP_BASE_URL, query, city_id),
    'SEARCH_OPEN_LINEUPS': lambda query: '{}/search?category=open_shows&query={}'.format(REDPINE_WEBAPP_BASE_URL, query)
}

FACEBOOK_APP_ID = os.environ.get('FACEBOOK_APP_ID')
FACEBOOK_APP_SECRET = os.environ.get('FACEBOOK_APP_SECRET')

SPOTIFY_APP_ID = '712f5c6c6537434bbd73d7c70723fe01'
SPOTIFY_APP_SECRET = 'b734e58d8d0a4ddb863315d5499aa498'

STRIPE_SECRET_KEY = os.environ.get('STRIPE_SECRET_KEY')
STRIPE_PUBLISHABLE_KEY = os.environ.get('STRIPE_PUBLISHABLE_KEY')
STRIPE_TEST_MODE = os.environ.get('STRIPE_TEST_MODE') == '1'

SQUARE_ACCESS_TOKEN = os.environ.get('SQUARE_ACCESS_TOKEN')
SQUARE_TEST_MODE = os.environ.get('SQUARE_TEST_MODE') == '1'

GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')
GOOGLE_PUBLIC_API_KEY = os.environ.get('GOOGLE_PUBLIC_API_KEY')

# MAIL AS A SERVICE
MAAS = {
    'PROVIDER': 'MAILGUN_V3',
    'DOMAIN': os.environ.get('MAILGUN_DOMAIN'),
    'API_KEY': os.environ.get('MAILGUN_API_KEY'),
    'DEFAULT_SENDER': 'no-reply@redpinemusic.com',
    'DEFAULT_SENDER_TITLE': 'RedPine Music',
    'OPTIONS': {
        'context_processors': [
            'core.context_processors.app_context'
        ]
    }
}

GDAL_LIBRARY_PATH = os.environ.get('GDAL_LIBRARY_PATH', '')
GEOS_LIBRARY_PATH = os.environ.get('GEOS_LIBRARY_PATH', '')

TAWK_API_KEY = os.environ.get('TAWK_API_KEY', '')

DATA_UPLOAD_MAX_MEMORY_SIZE = 15000000

SQUARE_POS_CALLBACK = os.environ.get('SQUARE_POS_CALLBACK', 'wat')

if ENV == ENVS.DEVELOPMENT: 
    DEBUG = True
    #MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    #MEDIA_URL = REDPINE_API_BASE_URL + '/media/'

    # AWS STATIC MEDIA CONFIG
    COMPRESS_ENABLED = True
    COMPRESS_OFFLINE = True
    os.environ['S3_USE_SIGV4'] = 'True'
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_BUCKET_NAME')
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_REGION = os.environ.get('AWS_REGION')
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_ENCRYPTION = False
    AWS_S3_CUSTOM_DOMAIN = os.environ.get('MEDIA_URL', 's3.{}.amazonaws.com/{}'.format(AWS_REGION, AWS_STORAGE_BUCKET_NAME))
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_REGION_NAME = AWS_REGION
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_ROOT = '/'
    MEDIA_URL = os.environ.get('MEDIA_URL', '//s3.{}.amazonaws.com/{}/'.format(AWS_REGION, AWS_STORAGE_BUCKET_NAME))

else:
    DEBUG = False

    # GETSENTRY CONFIG
    INSTALLED_APPS += [
        'raven.contrib.django.raven_compat',
    ]

    RAVEN_CONFIG = {
        'dsn': os.environ.get('SENTRY_DSN'),
        'release': os.environ.get('HEROKU_SLUG_COMMIT'), # see https://devcenter.heroku.com/articles/dyno-metadata
        'environment': ENV
    }

    # AWS STATIC MEDIA CONFIG
    COMPRESS_ENABLED = True
    COMPRESS_OFFLINE = True
    os.environ['S3_USE_SIGV4'] = 'True'
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_BUCKET_NAME')
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_REGION = os.environ.get('AWS_REGION')
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_ENCRYPTION = False
    AWS_S3_CUSTOM_DOMAIN = os.environ.get('MEDIA_URL', 's3.{}.amazonaws.com/{}'.format(AWS_REGION, AWS_STORAGE_BUCKET_NAME))
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_REGION_NAME = AWS_REGION
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    MEDIA_ROOT = '/'
    MEDIA_URL = os.environ.get('MEDIA_URL', '//s3.{}.amazonaws.com/{}/'.format(AWS_REGION, AWS_STORAGE_BUCKET_NAME))

    LOGGING = {
        'version': 1,
        'disable_existing_loggers': True,
        'root': {
            'level': 'WARNING',
            'handlers': ['sentry'],
        },
        'formatters': {
            'verbose': {
                'format': '%(levelname)s %(asctime)s %(module)s '
                          '%(process)d %(thread)d %(message)s'
            },
        },
        'handlers': {
            'sentry': {
                'level': 'ERROR', # To capture more than ERROR, change to WARNING, INFO, etc.
                'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
                'tags': {'custom-tag': 'x'},
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            }
        },
        'loggers': {
            'django.db.backends': {
                'level': 'ERROR',
                'handlers': ['console'],
                'propagate': False,
            },
            'raven': {
                'level': 'DEBUG',
                'handlers': ['console'],
                'propagate': False,
            },
            'sentry.errors': {
                'level': 'DEBUG',
                'handlers': ['console'],
                'propagate': False,
            },
        },
    }

FCM_API_KEY = os.environ.get('FCM_API_KEY', None)